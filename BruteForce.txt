Herein we will do work thinking about the general algorithm for the Brute Force solution.


Okay, so brute force would be to check each and every possible combination. In the example, there are four combinations

1-2-3-4 = 2 + 2 + 2 = 6
1-2-4 = 2 + 4 = 6
1-3-4 = 2 + 3 = 5
1-4 = 7

5 is the least, so that means it's the answer.

Each of those weights come from an array. 
Obviously, internally, we would need to have it be 0-indexed. Just subtract 1 from the post number when indexing.

   1 2 3 4
   _______
1 |0 2 3 7
2 |  0 2 4
3 |    0 2
4 |      0

Let A be the array. Each of those calculations from before would be as follows:

A[1][2] + A[2][3] + A[3][4] = 6
A[1][2] + A[2][4] = 6
A[1][3] + A[3][4] = 5
A[1][4] = 7

Always start at 1, always end at 4

----------------------------------
What if we use a stack to keep track of where we are in the sequence?

Overall, there should be more minuses in here. This is kind of convoluted. Probably works, though.

record = max_int
sum 0
target = 4
Push 1
sum += A[peek][peek+1] (1 2)
push 2
sum += A[peek][peek+1] (2 3)
push 3
sum += A[peek][peek+1] (3 4)
push 4
(peek is target), so check if the sum is smaller than some record.
sum -= A[pop][peek]
add 1 to top of the stack (3->4)
sum += A[peek][peek+1] (2 4)
Is target, so check against record
pop (stack is now [1 2])
add 1 to top of the stack (2->3)
sum += A[peek][peek+1] (3 4)
push peek+1 (4)
is target, so check against record.
pop [1 3]
add 1 to peek [1 4]
sum += A[peek][peek+1] (1 4)
is target, so check against record.
pop
peek is 1, so return record.

---------------------------
What about just for loops?

start = 0
end = 4
sum = 0
for (int i = 1; i < end; i++)
   sum = A[start][i]; //restarts each time
   for (int j = i+1; j < end; j++)
      sum += A[j-1][j]
      //for (int k = j+1; k < end; k++)
        // sum += A[k-1][k];
