Herein we will do work thinking about the general algorithm for the Dynamic Programming solution.

If we treat the array as an adjacency matrix, we can also treat the problem as a directed graph problem. 

The problem therefore reduces to a shortest path problem. What solves that? Dijkstra's algorithm.

From Wikipedia's D's A article, a Priority Queue implementation:

1  function Dijkstra(Graph, source):
2      dist[source] <- 0                             // Initialization
3      for each vertex v in Graph:           
4          if v â‰  source
5              dist[v] <- infinity                             // Unknown distance from source to v
6              prev[v] <- undefined                             // Predecessor of v
7          end if
8          Q.add_with_priority(v, dist[v])
9      end for 
10
11     while Q is not empty:                             // The main loop
12         u <- Q.extract_min()                             // Remove and return best vertex
13         for each neighbor v of u:
14             alt = dist[u] + length(u, v) 
15             if alt < dist[v]
16                 dist[v] <- alt
17                 prev[v] <- u
18                 Q.decrease_priority(v, alt)
19             end if
20         end for
21     end while
21     return dist[], prev[]

Since Java only allows one return value, we can return the path somehow, stack? string? 
	The cost of the minimum path will be the cost, obviously.
	
A stack would work well for what you mentioned, so we would have both the path and the cost.
I'm working on some 360 code right now, but I'll write the algorithm later if no one gets to it first.	
	-Ian
  