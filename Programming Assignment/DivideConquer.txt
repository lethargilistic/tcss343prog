Herein we will do work thinking about the general algorithm for the Divide and Conquer solution.

The main thing with Divide and Conquer is going to be recursing into the subproblems, and storing the answers.

The recursion relation will look something like this:
	
	INPUT: a 2D array A(1..n)(1..m), where n is the current pier and m is the pier we are going to. n = m.
	
				      m
			   	   _______
				  |0 2 3 7
				n |  0 2 4
				  |    0 2
				  |      0
	
	OUTPUT: a 1D array of the smallest cost to each of the n piers.
	
					{	-INF 	| if m > n
					{	0	 	| if n = m
	R(A[n][m]) =	{	A[1][m] | if n = 1
					{	MIN{of all m, MIN{R(A[n-1][m])} + A[n][m]} | if n > 1
					
	That is, we find the minimum way to get to 2, then to 3, then to 4, and so on.
		These values would be stored on the side in a 1D array.
	
	We could also store the shortest paths in stacks on the side.
		For instance, we would see that going directly from 1 to 3 is shorter than 1 to 2 to 3, 
			so we would store a [1,3] node at 3. For 4, we would test getting from 2 to 4 and 3 to 4, see that 3 to 4 is smaller,
				so the stack for 4 would be {[1,3] [3,4]}. 
	
	With a 4x4 grid, this is as good as brute force, but for a larger grid, the savings will be more apparent. 